from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
import aiohttp
from states import Form, FoodForm


router = Router()
users = {}


def initialize_user(user_id):
    if user_id not in users:
        users[user_id] = {
            "weight": None,
            "height": None,
            "age": None,
            "activity": None,
            "city": None,
            "water_goal": None,
            "calorie_goal": None,
            "logged_water": 0,
            "logged_calories": 0,
            "burned_calories": 0
        }


def calculate_water(weight, activity):
    base_water = weight * 30
    additional_activity = (activity // 30) * 500
    return base_water + additional_activity


def calculate_calories(weight, height, age, activity):
    base_calories = (10 * weight) + (6.25 * height) - (5 * age)
    activity_calories = activity * (200 / 60)
    return base_calories + activity_calories


async def get_food_info(food_name):
    url = f"https://world.openfoodfacts.org/api/v0/product/{food_name}.json"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if 'product' in data and 'nutriments' in data['product']:
                    product_name = data['product'].get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
                    calories_per_100g = data['product']['nutriments'].get('energy-kcal_100g', None)
                    return product_name, calories_per_100g
    return None, None


def calculate_calories_burned(workout_type, duration):
    calories_per_minute = {
        '–±–µ–≥': 10,
        '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 8,
        '–ø–ª–∞–≤–∞–Ω–∏–µ': 7,
        '—Å–∏–ª–æ–≤–∞—è': 6,
    }
    return calories_per_minute.get(workout_type.lower(), 5) * duration


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π. \n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
                        "/set_profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "/log_water - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã –≤ –º–ª.\n"
                        "/log_food - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö –∫–∫–∞–ª.\n"
                        "/log_workout - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n")


@router.message(Command("set_profile"))
async def cmd_profile(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(Form.weight)


@router.message(Form.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(Form.height)


@router.message(Form.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)


@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Form.activity)


@router.message(Form.activity)
async def process_activity(message: Message, state: FSMContext):
    await state.update_data(activity=message.text)
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Form.city)


@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    data = await state.get_data()

    user_id = message.from_user.id
    initialize_user(user_id)

    users[user_id]["weight"] = float(data.get("weight"))
    users[user_id]["height"] = float(data.get("height"))
    users[user_id]["age"] = int(data.get("age"))
    users[user_id]["activity"] = int(data.get("activity"))
    users[user_id]["city"] = message.text

    water_goal = calculate_water(users[user_id]["weight"],
                                 users[user_id]["activity"])
    calorie_goal = calculate_calories(users[user_id]["weight"],
                                      users[user_id]["height"],
                                      users[user_id]["age"],
                                      users[user_id]["activity"])

    users[user_id]["water_goal"] = water_goal
    users[user_id]["calorie_goal"] = calorie_goal

    await message.reply(f"–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å –ø–æ–º–æ—â—å—é /check_progress")
    await state.clear()


@router.message(Command("log_water"))
async def cmd_log_water(message: Message, command: CommandObject):
    user_id = message.from_user.id
    consumed_water = int(command.args.strip())
    users[user_id]["logged_water"] = consumed_water
    await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {consumed_water} –º–ª. \n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {users[user_id]['water_goal'] - consumed_water} –º–ª.")


@router.message(Command("log_food"))
async def cmd_log_food(message: Message, command: CommandObject, state: FSMContext):
    product_name, calories_per_100g = await get_food_info(command.args.strip())
    await state.update_data(calories_per_100g=calories_per_100g)

    if calories_per_100g is None:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
        return

    await message.reply(f"{product_name} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
    await state.set_state(FoodForm.calorie_num)


@router.message(FoodForm.calorie_num)
async def process_calories(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id

    try:
        grams = float(message.text)
        calories_per_100g = float(data.get("calories_per_100g"))
        consumed_calories = (calories_per_100g * grams) / 100
        users[user_id]["logged_calories"] += consumed_calories

        await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {consumed_calories:.2f} –∫–∫–∞–ª.")
        await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤.")


@router.message(Command("log_workout"))
async def cmd_log_workout(message: Message, command: CommandObject):
    args = command.args.split()

    if len(args) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30")
        return

    workout_type = args[0]

    try:
        duration = int(args[1])
        calories_burned = calculate_calories_burned(workout_type, duration)
        water_needed = (duration // 30) * 200
        user_id = message.from_user.id
        users[user_id]["burned_calories"] += calories_burned

        await message.reply(
            f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {duration} –º–∏–Ω—É—Ç ‚Äî {calories_burned} –∫–∫–∞–ª. \n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã."
        )
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö.")


@router.message(Command("check_progress"))
async def cmd_check_progress(message: Message):
    user_id = message.from_user.id

    if user_id not in users:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    user_data = users[user_id]

    logged_water = user_data.get("logged_water", 0)
    water_goal = user_data.get("water_goal", 0)

    logged_calories = user_data.get("logged_calories", 0)
    calorie_goal = user_data.get("calorie_goal", 0)
    burned_calories = user_data.get("burned_calories", 0)

    progress_message = (
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        "–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {water_goal - logged_water} –º–ª.\n\n"
        "–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {calorie_goal - logged_calories + burned_calories} –∫–∫–∞–ª."
    )

    await message.reply(progress_message)
